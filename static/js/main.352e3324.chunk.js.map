{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4KAGMA,EACA,mCADAA,EAEC,2CAuDQC,EAnDH,WAAO,IAAD,UACSC,mBAAS,IADlB,mBACTC,EADS,KACHC,EADG,OAGaF,mBAAS,IAHtB,mBAGTG,EAHS,KAGDC,EAHC,KAuBjB,OACE,yBAAKC,UAAoC,qBAAjBF,EAAQG,OAAwB,UAAAH,EAAQG,YAAR,eAAcC,MAAK,GAAK,WAAsB,OACtG,8BACE,yBAAKF,UAAU,cACb,2BAAOG,KAAK,OAAOH,UAAU,aAAaI,YAAY,cAAcC,SAAU,SAAAC,GAAC,OAAET,EAASS,EAAEC,OAAOC,QAAQA,MAAOZ,EAAOa,WAvB/G,SAACC,GACD,UAAVA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAASjB,EAAWiB,GACxBnB,EAAS,IACToB,QAAQC,IAAIF,UAmBS,oBAAflB,EAAQG,KACf,6BACD,yBAAKD,UAAU,gBACf,yBAAKA,UAAU,YAAYF,EAAQqB,KAAnC,cAA0CrB,EAAQsB,WAAlD,aAA0C,EAAaC,SACvD,yBAAKrB,UAAU,QAnBC,SAACsB,GACnB,IAEIC,EADO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,OAC3BD,EAAEE,UACbC,EAAQH,EAAEI,UACVC,EAJS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAI9FL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAYTE,CAAY,IAAIC,QAIxC,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,QACZiC,KAAKC,MAAL,UAAWpC,EAAQG,YAAnB,aAAW,EAAcC,MAD5B,SAGA,yBAAKF,UAAU,WAAf,UAA0BF,EAAQA,QAAQ,UAA1C,aAA0B,EAAoBG,QAG7C,MCzCYkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.352e3324.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\n\nconst api = {\n  key:\"dd38f9c4738d0590582e98983d712f33\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n}\n\n\nconst App = () => {\n  const [query,setQuery] = useState('');\n\n  const [weather,setWeather] = useState({});\n  const search = (evt)=>{\n    if(evt.key===\"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res=>res.json())\n      .then(result=>{setWeather(result);\n        setQuery('')\n        console.log(result)\n      })\n    }\n  }\n  const dateBuilder = (d)=>{\n    let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n    let days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\"] ;\n    let day = days[d.getDay()]\n    let date  = d.getDate();\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n    return `${day} ${date} ${month} ${year}`\n  }\n return(\n   <div className={(typeof weather.main !== 'undefined')?((weather.main?.temp>20)?('app warm'):('app')):('app')}>\n   <main>\n     <div className=\"search-box\">\n       <input type=\"text\" className=\"search-bar\" placeholder=\"Search.....\" onChange={e=>setQuery(e.target.value)} value={query} onKeyPress={search}/>\n     </div>\n     {(typeof weather.main!= \"undefined\")? (\n       <div>\n      <div className=\"location-box\">\n      <div className=\"location\">{weather.name},{weather.sys?.country}</div>\n      <div className=\"date\">{dateBuilder(new Date())}\n      </div>\n\n     </div>\n     <div className=\"weather-box\">\n       <div className=\"temp\">\n         {Math.round(weather.main?.temp)}Â°c\n       </div>\n       <div className=\"weather\">{weather.weather[0]?.main}</div>\n     </div>\n     </div>\n     ):('')}\n   </main>\n\n   </div>\n   \n )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}